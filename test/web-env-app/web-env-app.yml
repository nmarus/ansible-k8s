---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-env-app
  labels:
    run: web-env-app
spec:
  selector:
    matchLabels:
      run: web-env-app
  replicas: 2
  template:
    metadata:
      labels:
        run: web-env-app
    spec:
      containers:
        - name: web-env-app
          image: 42.42.42.100:5000/web-env-app:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBERNETES_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KUBERNETES_POD_SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 128Mi
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 20"]
---
apiVersion: v1
kind: Service
metadata:
  name: web-env-app
  labels:
    run: web-env-app
spec:
  ports:
    - port: 8080
  selector:
    run: web-env-app
  topologyKeys:
    - "kubernetes.io/hostname"
    - "topology.kubernetes.io/zone"
    - "topology.kubernetes.io/region"
    - "*"
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: web-env-app
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    # traefik.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/service-upstream: "true"
    ingress.kubernetes.io/service-upstream: "true"
spec:
  tls:
    - hosts:
        - web-env-app.domain.local
      secretName: tls-secret
  rules:
    - host: web-env-app.domain.local
      http:
        paths:
          - path: /
            backend:
              serviceName: web-env-app
              servicePort: 8080
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: web-env-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-env-app
  minReplicas: 2
  maxReplicas: 100
  behavior:
    scaleDown:
      # selectPolicy: Disabled
      # When the metrics indicate that the target should be scaled down the
      # algorithm looks into previously computed desired states and uses the
      # highest value from the specified interval.
      stabilizationWindowSeconds: 60
      # When multiple policies are specified the policy which allows the
      # highest amount of change is the policy which is selected by default.
      policies:
        - type: Pods
          # The "value" is *max* pods that can be terminated.
          value: 2
          periodSeconds: 30
        - type: Percent
          # The "value" is *max* percentage of pods that can be terminated.
          value: 33
          periodSeconds: 30
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
          # type: AverageValue
          # averageValue: 250m
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 90
          # type: AverageValue
          # averageValue: 250Mi

    #
    # Custom Metrics API
    #

    # - type: Pods
    #   # These metrics describe pods, and are averaged together across pods and
    #   # compared with a target value to determine the replica count. They work
    #   # much like resource metrics, except that they only support a target type
    #   # of AverageValue.
    #   pods:
    #     metric:
    #       name: packets-per-second
    #     target:
    #       type: AverageValue
    #       averageValue: 1k
    # - type: Object
    #   object:
    #     metric:
    #       name: requests-per-second
    #     describedObject:
    #       apiVersion: networking.k8s.io/v1beta1
    #       kind: Ingress
    #       name: web-env-app
    #     target:
    #       type: Value
    #       value: 10
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: web-env-app
spec:
  minAvailable: 3
  # maxUnavailable: 1
  selector:
    matchLabels:
      run: web-env-app

# Load Testing
#
# while true; do wget -q -O- http://web-env-app; done
