# ---
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: local-storage
# provisioner: kubernetes.io/no-provisioner
# volumeBindingMode: WaitForFirstConsumer
# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: local-pv
#   labels:
#     local-storage: "k8s-manager-1"
# spec:
#   capacity:
#     storage: 10Gi
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteMany
#   persistentVolumeReclaimPolicy: Delete
#   storageClassName: local-storage
#   local:
#     path: /mnt/pv01
#   nodeAffinity:
#     required:
#       nodeSelectorTerms:
#         - matchExpressions:
#           - key: kubernetes.io/hostname
#             operator: In
#             values:
#               - k8s-worker-1
#               - k8s-worker-2
#               - k8s-worker-3
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: local-pvc
# spec:
#   resources:
#     requests:
#       storage: 1Gi
#   accessModes:
#     - ReadWriteMany
#   storageClassName: local-storage
#   volumeMode: Filesystem
#   selector:
#     matchLabels:
#       local-storage: "k8s-manager-1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteMany
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  myvar1: hello world
  myvar2: "2020"
---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-secret
stringData:
  secret1: super
  secret2: secret
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    run: nginx
spec:
  topologyKeys:
    - "kubernetes.io/hostname"
    - "topology.kubernetes.io/zone"
    - "topology.kubernetes.io/region"
    - "*"
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  selector:
    run: nginx
  externalIPs:
    - 42.42.42.1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      run: nginx
  replicas: 3
  minReadySeconds: 10
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: nginx
    spec:
      restartPolicy: Always
      containers:
        - name: nginx
          image: nginx
          resources:
            limits:
              memory: 1Gi
              cpu: 500m
            requests:
              memory: 512Mi
              cpu: 250m
          ports:
            - name: http
              containerPort: 80
          env:
            - name: MY_VAR1
              valueFrom:
                configMapKeyRef:
                  name: nginx-config
                  key: myvar1
            - name: MY_VAR2
              valueFrom:
                configMapKeyRef:
                  name: nginx-config
                  key: myvar2
          volumeMounts:
            - name: glusterfsvol
              mountPath: /mnt/nginx
              subPath: nginx
            # - name: localvol
            #   mountPath: /mnt/nginx2
            #   subPath: nginx
            - name: configmapvol
              mountPath: /etc/config
            - name: secretvol
              mountPath: /etc/secret
          startupProbe:
            failureThreshold: 30
            periodSeconds: 10
            tcpSocket:
              # host: <defaults to pod ip>
              port: http
          readinessProbe: # marks not ready when failure threshold is hit
            initialDelaySeconds: 30
            failureThreshold: 2
            successThreshold: 2
            periodSeconds: 5
            timeoutSeconds: 5
            httpGet:
              # host: <defaults to pod ip>
              # httpHeaders:
              #   - name: headerprop1
              #     value: headervalue1
              #   - name: headerprop2
              #     value: headervalue2
              scheme: HTTP
              path: /
              port: http
          livenessProbe: # restarts pod when failure threshold is hit
            initialDelaySeconds: 30
            failureThreshold: 2
            successThreshold: 1 # must be 1 for livenessProbe
            periodSeconds: 10
            timeoutSeconds: 5
            exec:
              command:
                - curl
                - http://localhost
          lifecycle:
            # executes sync, must finish before pod is removed / evicted
            # "sleep" forces container to delay as state "terminating" to allow endpoint to update first
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 20"]
            # executes immediatly after start but not gauranteed before entrypoint of container
            # postStart:
            #   exec:
            #     command: ["/bin/bash", "-c", "touch /started.flag"]
      volumes:
        - name: glusterfsvol
          persistentVolumeClaim:
            claimName: nginx-pvc
        # - name: localvol
        #   persistentVolumeClaim:
        #     claimName: local-pvc
        - name: configmapvol
          configMap:
            name: nginx-config
        - name: secretvol
          secret:
            secretName: nginx-secret
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: default
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    nginx.ingress.kubernetes.io/service-upstream: "true"
    ingress.kubernetes.io/service-upstream: "true"
spec:
  tls:
    - hosts:
        - nginx.domain.local
      secretName: tls-secret
  rules:
    - host: nginx.domain.local
      http:
        paths:
          - path: /
            backend:
              serviceName: nginx
              servicePort: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nginx-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      run: nginx
  ingress:
    - {}
  policyTypes:
    - Ingress
