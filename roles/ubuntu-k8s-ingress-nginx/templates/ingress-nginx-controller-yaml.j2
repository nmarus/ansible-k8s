---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/name: {{nginx_controller_service_name}}
    app.kubernetes.io/instance: {{nginx_controller_service_name}}
  name: {{nginx_controller_namespace}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: {{nginx_controller_service_name}}
    app.kubernetes.io/instance: {{nginx_controller_service_name}}
    app.kubernetes.io/component: controller
  name: {{nginx_controller_service_name}}-controller
  namespace: {{nginx_controller_namespace}}
{% if config_map is defined %}
{{config_map|to_nice_yaml(indent=2)}}
{% endif %}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: {{nginx_controller_service_name}}
    app.kubernetes.io/instance: {{nginx_controller_service_name}}
    app.kubernetes.io/component: controller
  name: {{nginx_controller_service_name}}
  namespace: {{nginx_controller_namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: {{nginx_controller_service_name}}
    app.kubernetes.io/instance: {{nginx_controller_service_name}}
  name: {{nginx_controller_service_name}}
  namespace: {{nginx_controller_namespace}}
rules:
  - apiGroups:
      - ''
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ''
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: {{nginx_controller_service_name}}
    app.kubernetes.io/instance: {{nginx_controller_service_name}}
  name: {{nginx_controller_service_name}}
  namespace: {{nginx_controller_namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{nginx_controller_service_name}}
subjects:
  - kind: ServiceAccount
    name: {{nginx_controller_service_name}}
    namespace: {{nginx_controller_namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: {{nginx_controller_service_name}}
    app.kubernetes.io/instance: {{nginx_controller_service_name}}
    app.kubernetes.io/component: controller
  name: {{nginx_controller_service_name}}
  namespace: {{nginx_controller_namespace}}
rules:
  - apiGroups:
      - ''
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ''
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ''
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ''
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ''
    resources:
      - events
    verbs:
      - create
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: {{nginx_controller_service_name}}
    app.kubernetes.io/instance: {{nginx_controller_service_name}}
    app.kubernetes.io/component: controller
  name: {{nginx_controller_service_name}}
  namespace: {{nginx_controller_namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{nginx_controller_service_name}}
subjects:
  - kind: ServiceAccount
    name: {{nginx_controller_service_name}}
    namespace: {{nginx_controller_namespace}}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/name: {{nginx_controller_service_name}}
    app.kubernetes.io/instance: {{nginx_controller_service_name}}
    app.kubernetes.io/component: controller
  name: {{nginx_controller_service_name}}-controller
  namespace: {{nginx_controller_namespace}}
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{nginx_controller_service_name}}
      app.kubernetes.io/instance: {{nginx_controller_service_name}}
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{nginx_controller_service_name}}
        app.kubernetes.io/instance: {{nginx_controller_service_name}}
        app.kubernetes.io/component: controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
        prometheus.io/path: "/metrics"
    spec:
      hostNetwork: true
{% if nginx_node_label is defined and nginx_node_label_value is defined %}
      nodeSelector:
        {{nginx_node_label}}: {{nginx_node_label_value}}
{% endif %}
      serviceAccountName: {{nginx_controller_service_name}}
      tolerations:
        - operator: Exists
      containers:
        - name: controller
          image: us.gcr.io/k8s-artifacts-prod/ingress-nginx/controller:v0.34.1
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap={{nginx_controller_namespace}}/{{nginx_controller_service_name}}-controller
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
