---
- name: Check if auto update is enabled {% if not ubuntu_disable_autoupdate %}(option skipped){% endif %}
  when: ubuntu_disable_autoupdate
  stat:
    path: /etc/apt/apt.conf.d/20auto-upgrades
  register: autoupdate

- name: Disable auto update {% if not ubuntu_disable_autoupdate %}(option skipped){% endif %}
  when: ubuntu_disable_autoupdate and autoupdate.stat.exists
  become: true
  become_method: sudo
  file:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    state: absent

- name: Wait for any possibly running unattended upgrade to finish {% if not ubuntu_disable_autoupdate %}(option skipped){% endif %}
  when: ubuntu_disable_autoupdate and autoupdate.stat.exists
  become: true
  become_method: sudo
  raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true

- name: Reboot host after disabling auto update {% if not ubuntu_disable_autoupdate %}(option skipped){% endif %}
  when: ubuntu_disable_autoupdate and autoupdate.stat.exists and ansible_hostname != "127.0.0.1" and ansible_hostname != "localhost"
  shell: sleep 2 && /sbin/shutdown -r now "ansible reboot request"
  async: 1
  poll: 0
  ignore_errors: true
  become: true
  become_method: sudo

- name: Waiting for remote host to reboot {% if not ubuntu_disable_autoupdate %}(option skipped){% endif %}
  when: ubuntu_disable_autoupdate and autoupdate.stat.exists and ansible_hostname != "127.0.0.1" and ansible_hostname != "localhost"
  wait_for_connection:
    delay: 10
    sleep: 10
    timeout: 300

- name: Upgrade all packages to the latest version {% if not ubuntu_apt_upgrade %}(option skipped){% endif %}
  when: ubuntu_apt_upgrade
  become: true
  become_method: sudo
  apt:
    name: "*"
    state: latest
    force_apt_get: true
    update_cache: yes

- name: Reboot host after upgrading all packages to the latest version {% if not ubuntu_apt_reboot %}(option skipped){% endif %}
  when: ubuntu_apt_reboot and ubuntu_apt_upgrade
  shell: sleep 2 && /sbin/shutdown -r now "ansible reboot request"
  async: 1
  poll: 0
  ignore_errors: true
  become: true
  become_method: sudo

- name: Waiting for remote host to reboot {% if not ubuntu_apt_reboot %}(option skipped){% endif %}
  when: ubuntu_apt_reboot and ubuntu_apt_upgrade
  wait_for_connection:
    delay: 10
    sleep: 10
    timeout: 300

- name: Install optional platform packages
  when: ubuntu_apt_packages is defined
  become: true
  become_method: sudo
  apt:
    pkg: "{{ubuntu_apt_packages}}"
    state: present
    update_cache: yes

- name: Install Python 3
  become: true
  become_method: sudo
  apt:
    pkg:
      - python3
      - python3-pip
      - python3-apt
    state: present
    update_cache: yes

- name: Gather pip package facts
  pip_package_info:
    clients: ['pip3']
  register: pip_stats

# registers to ansible_facts.packages
- name: Gather package manager facts
  package_facts:
    manager: auto
