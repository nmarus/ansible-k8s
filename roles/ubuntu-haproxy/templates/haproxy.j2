global
  maxconn 50000
  maxpipes 50000
  tune.maxaccept 500
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
  stats timeout 30s
  user haproxy
  group haproxy
  daemon

{% if haproxy_frontend_mode == 'https' or (haproxy_frontend_mode == 'http' and haproxy_redirect_http) %}
  # Default SSL material locations
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private

  # Default ciphers to use on SSL-enabled listening sockets.
  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
  ssl-default-bind-options no-sslv3
{% endif %}

defaults
  log global
  option dontlognull
{% if haproxy_frontend_mode == 'tcp' or haproxy_frontend_mode == 'tls' %}
  mode tcp
{% else %}
  mode http
  option forwardfor
{% endif %}

  timeout connect 5000
  timeout client  50000
  timeout server  50000

  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

{% if haproxy_stats_enable and (haproxy_frontend_mode == 'http' or haproxy_frontend_mode == 'https') %}
  stats enable
  stats hide-version
  stats refresh 30s
  stats show-node
  stats uri {{haproxy_stats_uri}}
  stats realm Haproxy\ Statistics
  stats auth {{haproxy_stats_user}}:{{haproxy_stats_password}}
{% endif %}

{% if haproxy_frontend_mode == 'tcp' or haproxy_frontend_mode == 'http' %}
frontend tcp_in
  bind *:{{haproxy_frontend_tcp_port}}
  default_backend backend_{{haproxy_backend_name}}
{% if haproxy_frontend_mode == 'tcp' %}
  mode tcp
  timeout client 3h
  option tcplog
{% else %}
  mode http
  reqadd X-Forwarded-Proto:\ http
{% if haproxy_frontend_mode == 'http' and haproxy_redirect_http %}
  redirect scheme https
{% endif %}
{% endif %}
{% endif %}

{% if haproxy_frontend_mode == 'tls' or haproxy_frontend_mode == 'https' or (haproxy_frontend_mode == 'http' and haproxy_redirect_http) %}
frontend tls_in
  bind *:{{haproxy_frontend_tls_port}} ssl crt /etc/ssl/{{haproxy_app_domain_name}}/{{haproxy_app_domain_name}}.pem
  default_backend backend_{{haproxy_backend_name}}
{% if haproxy_frontend_mode == 'tls' %}
  mode tcp
  option tcplog
  timeout client 3h
{% else %}
  mode http
  reqadd X-Forwarded-Proto:\ https
{% endif %}
{% endif %}

backend backend_{{haproxy_backend_name}}
{% if haproxy_backend_mode == 'tcp' or haproxy_backend_mode == 'tls' %}
  mode tcp
  timeout server 3h
{% else %}
  mode http
{% endif %}
  option tcp-check
  option log-health-checks
  balance {{haproxy_backend_balance}}
{% for i in range(0, haproxy_backend_servers|length) %}
{% if haproxy_backend_check %}
  server {{haproxy_backend_name}}{{i|int+1}} {{haproxy_backend_servers[i]}}:{{haproxy_backend_port}}{% if haproxy_backend_mode == 'https' or haproxy_backend_mode == 'tls' %} ssl verify none{% endif %} check port {{haproxy_backend_port}}
{% else %}
  server {{haproxy_backend_name}}{{i|int+1}} {{haproxy_backend_servers[i]}}:{{haproxy_backend_port}}{% if haproxy_backend_mode == 'https' or haproxy_backend_mode == 'tls' %} ssl verify none{% endif %}
{% endif %}
{% endfor %}
