---
- include_tasks: haproxy-namespace.yml

- name: Check if secret exists
  shell: kubectl -n {{haproxy_controller_namespace}} get secret tls-secret
  no_log: true
  ignore_errors: true
  register: secret_status1

- name: Check if secret exists
  shell: kubectl -n default get secret {{haproxy_ssl_domain}}.tls-secret
  no_log: true
  ignore_errors: true
  register: secret_status2

- name: Update host facts for secret status
  set_fact:
    secret_missing1: "{{secret_status1.rc != 0}}"
    secret_missing2: "{{secret_status2.rc != 0}}"

- include_tasks: haproxy-generate-ssl.yml
  when: secret_missing1 and haproxy_ssl_generate and haproxy_ssl_domain
  vars:
    ssl_filename: "{{haproxy_ssl_domain}}"
    ssl_cn_name: "*.{{haproxy_ssl_domain}}"
    ssl_subj_opt: "/C=US/ST=SELF/L=SIGNED/O=SELF_SIGNED/OU=SELF_SIGNED"

- include_tasks: haproxy-custom-ssl.yml
  when: secret_missing1
  vars:
    ssl_key_path: "{{haproxy_ssl_key_path}}"
    ssl_crt_path: "{{haproxy_ssl_cert_path}}"
    secret_name: tls-secret
    secret_namespace: "{{haproxy_controller_namespace}}"

- name: Copy "{{haproxy_controller_namespace}}/tls-secret" to "default/{{haproxy_ssl_domain}}.tls-secret"
  when: secret_missing2
  shell: |
    kubectl -n {{haproxy_controller_namespace}} get secret tls-secret -o json --export \
      | jq -r '.metadata.namespace = "default"' \
      | jq -r '.metadata.name = "{{haproxy_ssl_domain}}.tls-secret"' \
      | kubectl create -f -

- include_tasks: haproxy-save-ssl.yml
  when: haproxy_ssl_local_save is defined
  vars:
    secret_name: tls-secret
    secret_namespace: "{{haproxy_controller_namespace}}"
    ssl_save_dir: "{{haproxy_ssl_local_save}}"

- include_tasks: haproxy-controller.yml

- include_tasks: haproxy-configmap.yml
  # vars:
  #   config_map:
  #     data:
  #       ssl-redirect: "OFF"

- include_tasks: haproxy-labels.yml
  vars:
    haproxynode: "{{haproxy_controller_namespace}}"
