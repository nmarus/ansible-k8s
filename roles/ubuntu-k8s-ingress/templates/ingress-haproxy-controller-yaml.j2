---
apiVersion: v1
kind: Namespace
metadata:
  name: {{haproxy_controller_namespace}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{haproxy_controller_namespace}}
  namespace: {{haproxy_controller_namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: {{haproxy_controller_namespace}}
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: {{haproxy_controller_namespace}}
  namespace: {{haproxy_controller_namespace}}
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - create
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: {{haproxy_controller_namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{haproxy_controller_namespace}}
subjects:
  - kind: ServiceAccount
    name: {{haproxy_controller_namespace}}
    namespace: {{haproxy_controller_namespace}}
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: {{haproxy_controller_namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: {{haproxy_controller_namespace}}
  namespace: {{haproxy_controller_namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{haproxy_controller_namespace}}
subjects:
  - kind: ServiceAccount
    name: {{haproxy_controller_namespace}}
    namespace: {{haproxy_controller_namespace}}
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: {{haproxy_controller_namespace}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-ingress
  namespace: {{haproxy_controller_namespace}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: haproxy-default-backend
  name: haproxy-default-backend
  namespace: {{haproxy_controller_namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      run: haproxy-default-backend
  template:
    metadata:
      labels:
        run: haproxy-default-backend
    spec:
      containers:
        - name: haproxy-default-backend
          image: gcr.io/google_containers/defaultbackend:1.0
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: haproxy-default-backend
  name: haproxy-default-backend
  namespace: {{haproxy_controller_namespace}}
spec:
  selector:
    run: haproxy-default-backend
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    run: haproxy-ingress
  name: haproxy-ingress
  namespace: {{haproxy_controller_namespace}}
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      run: haproxy-ingress
  template:
    metadata:
      labels:
        run: haproxy-ingress
    spec:
      hostNetwork: true
      nodeSelector:
        haproxynode: {{haproxy_controller_namespace}}
      serviceAccountName: {{haproxy_controller_namespace}}
      tolerations:
        - operator: Exists
      containers:
        - name: haproxy-ingress
          image: quay.io/jcmoraisjr/haproxy-ingress
          args:
            - --configmap={{haproxy_controller_namespace}}/haproxy-ingress
            - --default-backend-service={{haproxy_controller_namespace}}/haproxy-default-backend
            - --default-ssl-certificate={{haproxy_controller_namespace}}/tls-secret
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
            - name: stat
              containerPort: 1936
            - name: ingress-stats
              containerPort: 10254
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10253
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
