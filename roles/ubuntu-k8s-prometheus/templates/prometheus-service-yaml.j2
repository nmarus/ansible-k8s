---
apiVersion: v1
kind: Namespace
metadata:
  name: {{prometheus_namespace}}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{prometheus_service_name}}
  namespace: {{prometheus_namespace}}
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteMany
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{prometheus_service_name}}
  namespace: {{prometheus_namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: {{prometheus_service_name}}
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: {{prometheus_service_name}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{prometheus_service_name}}
subjects:
  - kind: ServiceAccount
    name: {{prometheus_service_name}}
    namespace: {{prometheus_namespace}}
---
kind: Service
apiVersion: v1
metadata:
  name: {{prometheus_service_name}}
  namespace: {{prometheus_namespace}}
  labels:
    app.kubernetes.io/name: {{prometheus_service_name}}
    app.kubernetes.io/instance: {{prometheus_service_name}}
    app.kubernetes.io/component: service
spec:
  selector:
    app.kubernetes.io/name: {{prometheus_service_name}}
    app.kubernetes.io/instance: {{prometheus_service_name}}
    app.kubernetes.io/component: controller
  ports:
    - name: http
      protocol: TCP
      port: 9090
      targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: {{prometheus_service_name}}
    app.kubernetes.io/instance: {{prometheus_service_name}}
    app.kubernetes.io/component: controller
  name: {{prometheus_service_name}}
  namespace: {{prometheus_namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{prometheus_service_name}}
      app.kubernetes.io/instance: {{prometheus_service_name}}
      app.kubernetes.io/component: controller
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{prometheus_service_name}}
        app.kubernetes.io/instance: {{prometheus_service_name}}
        app.kubernetes.io/component: controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: {{prometheus_service_name}}
      containers:
        - name: controller
          image: prom/prometheus
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --storage.tsdb.retention={{prometheus_retention}}
          resources:
            limits:
              cpu: 500m
              memory: 2500Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: data
              mountPath: /prometheus
            - name: config-volume
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
          ports:
            - containerPort: 9090
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{prometheus_service_name}}
        - name: config-volume
          configMap:
           name: {{prometheus_service_name}}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    nginx.ingress.kubernetes.io/service-upstream: "true"
    ingress.kubernetes.io/service-upstream: "true"
  labels:
    app.kubernetes.io/name: {{prometheus_service_name}}
    app.kubernetes.io/instance: {{prometheus_service_name}}
    app.kubernetes.io/component: ingress
  name: {{prometheus_service_name}}
  namespace: {{prometheus_namespace}}
spec:
  tls:
    - hosts:
        - {{prometheus_fqdn}}
      secretName: {{prometheus_tls_secret}}
  rules:
    - host: {{prometheus_fqdn}}
      http:
        paths:
          - path: /
            backend:
              serviceName: {{prometheus_service_name}}
              servicePort: 9090
