---
apiVersion: v1
kind: Namespace
metadata:
  name: {{dashboard_namespace}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}-service
  namespace: {{dashboard_namespace}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{dashboard_services_name}}-admin-user
  namespace: {{dashboard_namespace}}
---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}
  namespace: {{dashboard_namespace}}
spec:
  ports:
    - port: 80
      targetPort: 9090
  selector:
    k8s-app: {{dashboard_services_name}}
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}-csrf
  namespace: {{dashboard_namespace}}
type: Opaque
data:
  csrf: ""
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}-key-holder
  namespace: {{dashboard_namespace}}
type: Opaque
---
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}-settings
  namespace: {{dashboard_namespace}}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}-service
  namespace: {{dashboard_namespace}}
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["{{dashboard_services_name}}-key-holder", "{{dashboard_services_name}}-certs", "{{dashboard_services_name}}-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update '{{dashboard_services_name}}-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["{{dashboard_services_name}}-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "{{dashboard_services_name}}-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "{{dashboard_services_name}}-metrics-scraper", "http:{{dashboard_services_name}}-metrics-scraper"]
    verbs: ["get"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}-service
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}-service
  namespace: {{dashboard_namespace}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{dashboard_services_name}}-service
subjects:
  - kind: ServiceAccount
    name: {{dashboard_services_name}}-service
    namespace: {{dashboard_namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{dashboard_services_name}}-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{dashboard_services_name}}-service
subjects:
  - kind: ServiceAccount
    name: {{dashboard_services_name}}-service
    namespace: {{dashboard_namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{dashboard_services_name}}-admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: {{dashboard_services_name}}-admin-user
    namespace: {{dashboard_namespace}}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}
  name: {{dashboard_services_name}}
  namespace: {{dashboard_namespace}}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: {{dashboard_services_name}}
  template:
    metadata:
      labels:
        k8s-app: {{dashboard_services_name}}
    spec:
      containers:
        - name: {{dashboard_services_name}}
          image: kubernetesui/dashboard:v2.0.3
          ports:
            - containerPort: 9090
              protocol: TCP
          args:
            - --namespace={{dashboard_namespace}}
            - --enable-insecure-login
          # Uncomment the following line to manually specify Kubernetes API server Host
          # If not specified, Dashboard will attempt to auto discover the API server and connect
          # to it. Uncomment only if the default does not work.
          # - --apiserver-host=http://my-address:port
          volumeMounts:
            # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
          livenessProbe:
            httpGet:
              path: /
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: {{dashboard_services_name}}-service
      nodeSelector:
        "kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}-metrics-scraper
  name: {{dashboard_services_name}}-metrics-scraper
  namespace: {{dashboard_namespace}}
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    k8s-app: {{dashboard_services_name}}-metrics-scraper
---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: {{dashboard_services_name}}-metrics-scraper
  name: {{dashboard_services_name}}-metrics-scraper
  namespace: {{dashboard_namespace}}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: {{dashboard_services_name}}-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: {{dashboard_services_name}}-metrics-scraper
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
    spec:
      containers:
        - name: {{dashboard_services_name}}-metrics-scraper
          image: kubernetesui/metrics-scraper:v1.0.4
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      serviceAccountName: {{dashboard_services_name}}-service
      nodeSelector:
        "kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      volumes:
        - name: tmp-volume
          emptyDir: {}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: {{dashboard_services_name}}-ingress
  namespace: {{dashboard_namespace}}
spec:
  tls:
    - hosts:
      - {{dashboard_fqdn}}
      secretName: {{dashboard_tls_secret}}
  rules:
    - host: {{dashboard_fqdn}}
      http:
        paths:
          - path: /
            backend:
              serviceName: {{dashboard_services_name}}
              servicePort: 80
