---
#
# Provision Ubuntu Hosts
#

- hosts: localhost
  tasks:
    - include_role:
        name: vmw-create-from-template
      vars:
        vm_name: "{{glusterfs_prefix}}{{ansible_loop.index}}"
        vm_hostname: "{{glusterfs_prefix}}{{ansible_loop.index}}"
        vm_template: "{{vmw_base_image}}"
        network_ip_address: "{{item}}"
        hw_memory: 4096
        hw_cpus: 2
        hw_disk: 20
      loop_control:
        extended: yes
      loop: "{{groups['k8s_glusterfs']|list}}"

- hosts: localhost
  tasks:
    - include_role:
        name: vmw-create-from-template
      vars:
        vm_name: "{{etcd_prefix}}{{ansible_loop.index}}"
        vm_hostname: "{{etcd_prefix}}{{ansible_loop.index}}"
        vm_template: "{{vmw_base_image}}"
        network_ip_address: "{{item}}"
        hw_memory: 4096
        hw_cpus: 2
        hw_disk: 20
      loop_control:
        extended: yes
      loop: "{{groups['k8s_etcd']|list}}"

- hosts: localhost
  tasks:
    - include_role:
        name: vmw-create-from-template
      vars:
        vm_name: "{{manager_prefix}}{{ansible_loop.index}}"
        vm_hostname: "{{manager_prefix}}{{ansible_loop.index}}"
        vm_template: "{{vmw_base_image}}"
        network_ip_address: "{{item}}"
        hw_memory: 4096
        hw_cpus: 2
        hw_disk: 20
      loop_control:
        extended: yes
      loop: "{{groups['k8s_manager']|list}}"

- hosts: localhost
  tasks:
    - include_role:
        name: vmw-create-from-template
      vars:
        vm_name: "{{router_prefix}}{{ansible_loop.index}}"
        vm_hostname: "{{router_prefix}}{{ansible_loop.index}}"
        vm_template: "{{vmw_base_image}}"
        network_ip_address: "{{item}}"
        hw_memory: 4096
        hw_cpus: 2
        hw_disk: 20
      loop_control:
        extended: yes
      loop: "{{groups['k8s_router']|list}}"

- hosts: localhost
  tasks:
    - include_role:
        name: vmw-create-from-template
      vars:
        vm_name: "{{worker_prefix}}{{ansible_loop.index}}"
        vm_hostname: "{{worker_prefix}}{{ansible_loop.index}}"
        vm_template: "{{vmw_base_image}}"
        network_ip_address: "{{item}}"
        hw_memory: 4096
        hw_cpus: 2
        hw_disk: 20
      loop_control:
        extended: yes
      loop: "{{groups['k8s_worker']|list}}"


- hosts: localhost
  tasks:
    - include_role:
        name: vmw-create-from-template
      vars:
        vm_name: "{{manager_prefix}}loadbalancer"
        vm_hostname: "{{manager_prefix}}loadbalancer"
        vm_template: "{{vmw_base_image}}"
        network_ip_address: "{{groups['k8s_loadbalancer_manager'][0]}}"
        hw_memory: 4096
        hw_cpus: 2
        hw_disk: 20

- hosts: localhost
  tasks:
    - include_role:
        name: vmw-create-from-template
      vars:
        vm_name: "{{router_prefix}}loadbalancer"
        vm_hostname: "{{router_prefix}}loadbalancer"
        vm_template: "{{vmw_base_image}}"
        network_ip_address: "{{groups['k8s_loadbalancer_router'][0]}}"
        hw_memory: 4096
        hw_cpus: 2
        hw_disk: 20

- hosts: localhost
  tasks:
    - name: "Waiting for VMs to finish setup"
      wait_for:
        host: "{{item}}"
        port: 22
        state: started
        delay: 0
        sleep: 1
        timeout: 600
      loop_control:
        extended: yes
      loop: "{{(groups['k8s_glusterfs'] + groups['k8s_etcd'] + groups['k8s_loadbalancer_manager'] + groups['k8s_manager'] + groups['k8s_loadbalancer_router'] + groups['k8s_router'] + groups['k8s_worker'])|list}}"

#
# Add Secondary Disk(s) to Ubuntu VMs
#

- hosts: localhost
  tasks:
    - name: "Add Secondary Disk 1 to Virtual Machine"
      local_action:
        module: vmware_guest_disk
        name: "{{glusterfs_prefix}}{{ansible_loop.index}}"
        hostname: "{{vcenter_hostname}}"
        username: "{{vcenter_username}}"
        password: "{{vcenter_password}}"
        validate_certs: false
        datacenter: "{{vcenter_datacenter if vcenter_datacenter is defined else 'ha-datacenter'}}"
        disk:
          - scsi_type: paravirtual
            scsi_controller: 0
            unit_number: 1
            state: present
            size_gb: 10
            autoselect_datastore: yes
            type: "{{vcenter_disk_provisioning}}"
      loop_control:
        extended: yes
      loop: "{{groups['k8s_glusterfs']|list}}"

- hosts: localhost
  tasks:
    - name: "Add Secondary Disk 2 to Virtual Machine"
      local_action:
        module: vmware_guest_disk
        name: "{{glusterfs_prefix}}{{ansible_loop.index}}"
        hostname: "{{vcenter_hostname}}"
        username: "{{vcenter_username}}"
        password: "{{vcenter_password}}"
        validate_certs: false
        datacenter: "{{vcenter_datacenter if vcenter_datacenter is defined else 'ha-datacenter'}}"
        disk:
          - scsi_type: paravirtual
            scsi_controller: 0
            unit_number: 2
            state: present
            size_gb: 100
            autoselect_datastore: yes
            type: "{{vcenter_disk_provisioning}}"
      loop_control:
        extended: yes
      loop: "{{groups['k8s_glusterfs']|list}}"

#
# Utility Playbooks
#

# Update snapshot inventory for all managed virtual machines
- hosts: all
  tasks:
    - import_role:
        name: vmw-snapshot-inventory
      tags:
        - never
        - snapshot-inventory

# Create NEW snapshot for all managed virtual machines
- hosts: all
  tasks:
    - import_role:
        name: vmw-snapshot-create
      tags:
        - never
        - snapshot-create

# Clear ALL snapshots for all managed virtual machines
- hosts: all
  tasks:
    - import_role:
        name: vmw-snapshot-clear
      tags:
        - never
        - snapshot-clear

# Restore LAST Snapshot for all managed virtual machines
- hosts: all
  tasks:
    - import_role:
        name: vmw-snapshot-restore
      tags:
        - never
        - snapshot-restore

# Remove ALL Virtual Machines from vCenter
- hosts: all
  tasks:
    - name: Gather meta data for VM
      set_fact:
        vm_name: "{{hostvars[inventory_hostname].ansible_facts.vm_name}}"
    - import_role:
        name: vmw-remove-hosts
      tags:
        - never
        - remove-hosts
    - name: Remove cache
      run_once: true
      tags:
        - never
        - remove-hosts
        - remove-cache
      local_action:
        module: file
        path: "{{playbook_dir}}/.cache"
        state: absent

# Restart all VMs
- hosts: all
  tasks:
    - import_role:
        name: vmw-restart-hosts
      tags:
        - never
        - restart-hosts
